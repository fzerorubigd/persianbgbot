// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/cards.yaml (24.543kB)

package bloodrage

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataCardsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x4b\x57\x1b\x49\x96\xde\xfb\x57\xc4\xf4\x06\xf0\x6b\x06\xb0\x7b\x7a\xbc\xa3\x6c\x97\x5d\x7d\xda\x5d\x3e\x86\x29\x1f\x2f\x03\x65\x20\xc5\x38\x95\xa9\x8e\x4c\x41\x69\x56\x8d\x0f\x0f\x2d\xd8\xcd\x3f\xf0\x62\x04\x6a\xca\x1a\x01\xe5\x1e\xd7\xa2\x36\xfd\x27\x22\xc5\xae\x7e\xc9\x9c\x7b\xe3\x91\x91\x0f\xa5\x24\x03\x36\x67\x0e\x9b\x3a\x65\x24\x65\x66\xdc\xb8\x8f\xef\xde\xef\xcb\xb8\x77\xef\xde\xad\x95\x3a\x23\x8b\x8f\x6e\xdd\xbb\x45\xc8\x9f\x69\x93\x3d\x22\x73\xdf\x0a\x5e\xaf\xd3\xb9\xb9\x88\x3c\x13\xb4\xc6\xe6\x6e\x11\xb2\xba\xf6\xea\x11\x59\xba\x45\xc8\x4b\x9f\x76\x98\x78\x1c\xb6\x83\xf8\x11\x99\x5f\xba\xf3\xcf\x0f\xee\x2c\xdc\x22\xe4\x69\x50\xf7\x79\xd4\x78\x44\xbe\xdb\x20\x9d\xb0\x4d\x5a\xdc\xf7\x69\x9d\x91\xa8\x5d\xab\xb1\x28\xda\x68\xfb\x7e\xe7\x2e\x11\x94\x47\x8c\xd0\x20\x8c\x1b\x4c\x90\x79\x7e\x9f\xdd\x27\x1e\xdf\xd8\x60\x82\x05\xf1\x02\x09\xf1\xb7\x82\xd4\x7c\x1a\x90\x28\xa6\x71\x44\xd6\x3b\x64\xf1\x3e\xdc\x96\x89\x88\xd3\xe0\x11\x91\xbd\xd1\x40\x0e\x89\xfc\x45\xf6\xe4\x50\xf6\x49\xb2\x9b\x74\x93\xed\xe4\xdd\xf9\x81\xec\x13\xf9\x3e\xd9\x3d\x3f\x90\x27\x44\x1e\x26\x5d\x39\x20\xe7\x07\xa3\xa3\xf3\x03\x22\x07\xe7\x07\xea\x57\x3d\x79\x42\x92\x3d\x79\x26\x7b\xc9\x1e\xfc\x25\xd9\x97\xbd\xf3\x03\x32\x3a\x4a\x76\x92\x3d\x22\x87\xb2\x87\xbf\x21\xf2\x93\x1c\xc8\x01\x91\x87\xb2\x97\xec\xc8\x1e\xfc\xcf\xa1\x1c\x9e\x1f\xc8\x81\x6b\xa7\xe7\x8c\x37\x3d\xea\xfb\x60\xa9\x55\x5e\x6f\xc4\xd6\x52\xc9\xae\xec\xcb\x5f\xce\x0f\xe4\xb0\xc4\x64\x19\x7b\xad\x35\x78\x44\x6a\x54\x78\xa4\x41\x23\x12\x37\x18\x89\x68\x93\x91\x4d\xea\xb7\x19\xd1\x7f\x69\xf0\x7a\x83\x45\x31\x11\x6c\x93\x51\x9f\x79\x84\x05\xac\xd9\xc1\x5f\x65\x4d\x73\x7e\x90\xec\x91\xd1\x51\x6a\x9a\x77\x72\x80\xff\x38\xc3\xa5\x38\x7f\xb1\x4b\x93\x7d\x58\x97\xfb\x33\xf9\x13\xfe\x65\x1b\xbe\x32\x94\x3d\xf8\x2f\x18\xee\x54\xf6\xdd\xb5\xff\x29\x7c\xcb\x61\xdd\x6b\x82\xd7\xde\x32\xd1\xb1\x4b\xff\x97\xe9\x9d\xc4\x0f\x23\x76\x97\x44\x31\xa3\x3e\x59\x24\x02\xfc\x65\x43\x84\x4d\x5c\xf3\x16\x0f\x02\x1e\xd4\x49\x0b\x2f\x55\xea\x02\x67\xc9\xae\xda\x9a\x9e\xfc\x20\xfb\xb0\x39\xf2\x40\x6f\xdf\x07\xf8\x50\x6d\x37\x7e\x7e\x02\x7f\x86\x1d\x3e\x94\xc3\x64\x4f\x0e\x92\x7d\xf8\xdf\x81\x3c\x01\xd7\xc8\x6e\xea\xf7\x1e\x0f\x70\x43\x9b\x3c\x4e\x5d\x7f\xb1\x6c\x55\xcb\xd9\x55\x3d\x61\x51\x2c\xc2\x0e\x09\x03\x46\xb6\xa8\x10\x3c\x14\x6a\x3d\x8c\xd6\x1a\x24\x6c\xb5\xc2\x80\x05\x31\xe1\x01\x89\x61\xd3\x5b\x22\xdc\xe4\x41\x8d\x91\x75\xb6\x11\x0a\x46\x6a\x61\xb3\x45\x05\xac\x79\x75\xed\x55\x66\xc1\xc9\x3b\x79\x98\xec\xe8\xe5\xe0\x26\x8f\x8e\x92\x7d\xb5\x9b\xbd\xf3\x03\x79\x0a\xff\x80\x8d\xc5\xed\xeb\x25\x7b\xf2\x58\xf6\x60\xfd\x83\x64\x1f\x96\xa7\xfd\x7e\x1f\x8c\x36\xc4\x50\x39\x24\x52\xc5\x03\x6e\x3d\x5e\x04\xbc\xa1\xaf\xcd\x77\x8c\xd1\x71\x9c\x74\x21\x58\x7a\x3a\x98\xc0\x80\x79\x63\xad\x35\x42\x01\xc6\x7a\x4e\x9b\x4d\x26\xaa\xad\xf5\x30\x6b\xad\x67\x94\x07\x64\x99\xd4\xfd\x50\x74\x08\x57\x0e\xb1\x65\x6c\xb3\x4e\xe3\xd8\x67\xa5\xbb\xee\x3c\x77\xb2\x87\x2e\x3a\x20\xc9\xaf\x10\x6a\x49\x17\xec\x73\xa6\xb6\x94\xa0\x55\x64\x2f\xd9\x96\x7d\xf9\x01\x5d\xfe\xb7\xbf\xfe\x17\x19\x0d\x92\x9d\xa4\x0b\x0e\x8e\xff\x84\xab\xe1\xda\xb7\x65\xbf\x7c\x81\x1d\x5c\xdf\x37\x34\x6a\x54\xa6\xc1\xcc\xd2\xfe\x1c\x12\xb6\xb1\xc1\x6a\x71\xe6\xf9\x0f\x21\x13\xf5\xe4\xdf\xe4\xb0\xe4\x06\x8f\x45\xdb\xb9\xc3\x83\xc2\x1d\x1e\x5c\xf8\x0e\xab\x4d\x77\x0d\xcb\xe5\xfe\x9c\xdf\xa4\xcf\xba\x8f\x1b\x37\x0f\xa7\xf0\x84\x59\x6e\x92\x96\xa6\xc7\x0d\x2a\x9a\x95\x59\x27\x73\x93\x7f\x6f\xd5\x05\xf5\x18\x26\xcd\x88\xd4\xc2\x28\x46\x8f\x5b\x24\x3e\x8b\x22\x12\x87\x98\x68\x32\x0e\x67\x12\xa2\xae\x11\xf2\x7d\xf2\xeb\x48\xb9\xcb\x20\x93\x65\x46\x47\x98\xed\x87\x3a\x5f\xc2\x57\x75\xca\x21\x10\x6b\xf0\x21\x51\x49\x17\x32\x4f\xf9\x62\x56\xdb\xb5\x5a\x28\x2a\x3c\x2c\x97\x6a\x5e\x37\x58\x80\xcf\xcf\x83\x4d\x58\xd5\x16\x8f\x1b\x84\x06\x1d\xb2\xc1\xeb\x6d\xc1\xee\xe2\x67\x4d\xda\xc9\x7d\x4e\xa8\xe7\xf1\x98\x87\x01\xf5\x6d\x86\xc2\x90\xa3\x71\x9a\x8e\x36\x30\x6d\xb1\x5c\xf4\x61\xf9\x80\x0c\x92\x6c\xab\x62\xaa\xca\xe6\x3e\x91\x3f\x25\xbb\xc9\x0e\xa6\x23\x95\x64\x1d\x03\x39\x79\x64\x1f\xf2\x11\x5c\x44\xbe\x87\xc8\xdd\x36\x15\xf9\x10\x2e\xf1\x33\x84\x24\x56\x2c\xcc\x5c\x7b\x68\x43\xb8\xe4\x3e\xa4\xf8\x6c\x86\x92\x3d\xf9\x11\x02\x36\xd9\x2f\x0d\x58\x65\xd3\x48\x79\x48\x18\xb1\x80\xcc\xbf\x58\x98\xa9\x38\xad\x78\x1e\x59\x24\xcd\x4e\x14\xf3\x1a\x38\x06\x42\x12\xc1\x22\x26\x36\xd9\x7d\xf2\x06\xfe\xa5\x3e\x8c\xd0\xc2\x82\xc5\x82\xd1\x18\xbe\x89\x06\xfe\x0f\x5a\x83\x2c\x1f\xb6\x63\x26\x52\xa3\xf2\x00\xca\x9c\x07\x10\x67\x9d\x41\x8e\xf7\x54\xb1\x60\x5e\xc6\xcc\x68\x36\xc4\x30\xa7\x50\xd1\xc0\x86\x68\xa0\xa1\x3c\x81\xfc\x46\xe4\x07\x48\xc5\xb2\xaf\x8d\x52\xb0\xc4\xfd\xec\x8f\x8d\xeb\xaa\x4a\x89\x1f\xf5\x93\x2e\xfc\x18\x5c\x51\x5f\xdb\x9a\x56\x7f\x5b\x6f\x42\x17\x76\xe7\x13\x94\x9e\xdf\xfe\x7a\x00\x98\x09\x52\xae\xda\x74\xf7\xd7\xc7\xea\x0e\x4e\x55\x4a\x2b\x86\x3c\x4b\xba\x79\x9f\x37\xb8\xe1\x1b\x88\x3b\x1e\xd4\x2b\x6a\xc6\x78\xd0\x40\xa8\xae\x10\x05\x47\xcf\xba\xb2\x72\xfb\xb4\x18\x97\x7a\xb6\x53\x57\x6c\x41\x41\xbc\x87\x31\x0c\xd5\xc5\xb1\x9b\x2a\x2d\xb8\xf2\xf7\x95\x95\x53\x62\x1a\x18\x80\x01\xc0\xa2\x3f\xcb\x21\x20\x2a\x95\x31\xe6\x53\x3f\x5f\x98\xe4\xcf\xc6\x5e\x4f\xc2\x26\xe5\x41\x65\x85\x2d\x96\xd7\x45\x5d\x5e\x61\xe1\x08\x42\x54\x7a\x40\xa3\x09\xe6\x33\x1a\x69\xc4\xf5\x03\xf5\x1b\xd4\xf7\x69\x2e\xe6\xd1\x3d\xe4\x89\x72\x8b\xd2\xe0\x47\x60\x01\x96\xd9\x01\xef\x41\xac\xac\x40\xd6\xae\xfa\x22\x24\x3e\xb5\x28\x8b\xcd\xc6\x97\xe4\x7b\x44\x1e\x8e\xa0\x7a\x17\x90\xb6\xc1\x19\xcf\x60\x39\xd3\x17\x62\x34\xc2\x92\x36\xc2\x56\x83\x05\x6c\x93\x09\x42\x63\x02\x4b\x8f\xc9\x92\x06\xd2\xca\x2a\x11\xa1\x82\xa5\x71\x09\x89\xd1\xb8\x99\x6a\x69\xa8\x88\x79\x8d\xb7\x68\x0c\xe1\x9c\xb5\xd4\x00\x62\x73\x12\xd6\x70\xd6\x56\xea\x75\xd6\xa8\x1a\xd8\x9e\xc9\xe1\xe8\xc8\x14\x8f\x33\x85\x70\xe1\x1f\xa7\x0a\xab\xec\xaa\xdb\xa6\xa9\x74\x00\x3f\x54\xb0\xc8\x8d\xc0\x52\x40\x93\x73\xa7\x62\x5e\xcc\x15\x9c\x95\x0d\x48\x67\xca\x6f\xa0\x09\x21\x94\xfc\xa5\x0d\x3d\x09\xb6\x2e\x3c\x00\xf4\xba\x4e\xe3\x34\x1e\x55\x52\xe4\x31\xf4\x30\x94\xdc\x59\x36\x96\x84\xef\x97\xc5\x1f\xfa\x86\xd3\xba\x00\x80\x55\xc6\x93\x7d\x32\x3f\x3a\x4a\xba\xf2\xbf\x61\xe5\x0b\xda\x66\xbb\x18\xa0\x43\x79\x82\xe9\x31\xe9\xda\xe0\x91\x07\x25\x01\x8b\xc8\x19\x03\x16\x7d\xfa\x53\xb2\xa7\x3e\x4d\xef\x78\xe7\xfc\x54\x77\x39\xc9\xb6\xec\x61\x87\x50\x12\x8e\x4f\xb6\xa8\xd8\x20\x8f\x1b\x9c\x6d\xc4\x94\x07\x95\x8d\xf1\xc3\x3b\xb7\x33\x26\x9c\xbb\xfd\x38\x8c\xe2\x88\x04\xa1\x6a\x75\xe2\x90\xb4\x35\x28\xc1\x32\x0c\xf9\xeb\xfe\x5c\x06\xf7\xef\x43\x06\x4a\xf6\x54\xb7\x32\x2c\x83\x21\xe0\x27\xb6\x00\xef\xe9\x6e\xcf\x7d\xe2\x6f\x59\x20\xb8\xb8\x3d\x75\xc8\xcc\xbd\xa2\xf5\x80\x8a\x7f\x7c\x7c\x6b\x42\x21\xd2\xd7\x00\xb7\x29\xab\x67\xd0\xad\x79\x61\xd8\x64\x1e\x76\x3e\xf3\xed\x00\x21\x15\x8f\xe1\x07\x6f\xea\x75\x4f\xd0\x88\xfb\x0b\xd9\xa5\xcd\xc9\xe1\x68\x80\x8e\x3a\x4c\xba\xa3\x81\x9b\x48\xd3\xbb\x61\x3f\x9e\x2f\x33\x06\x06\x68\x2f\x38\x85\x90\x72\x5c\x5e\xa1\xc6\x13\xc4\x8f\x98\x7a\xa1\xdb\xc1\x3c\x04\x7e\x31\x4a\xbb\x07\x9d\xbf\x20\x78\x92\x1d\xec\x9d\x7a\x70\x31\xe8\xb3\x0e\x31\xde\x06\x73\x8e\x19\x5f\x80\xb5\x20\x9b\x3c\xe3\x34\x88\x6f\x57\xc1\xe8\x62\x7b\xdf\x0c\xc1\x5a\x82\xd4\xe0\x3b\x91\x8a\x08\x9f\x51\x8f\x89\x92\xf6\x1d\x5a\xb6\xa4\x8b\x99\x54\xd5\xf0\x6d\xc8\xa6\xd8\xd5\x61\xdb\xfa\x93\x3c\x85\xb5\xaa\x95\xe5\xc3\x7b\x95\x51\xb2\xca\x44\x8b\x05\xf1\xf8\x47\x5c\x9e\xf2\x11\xa3\x06\x6f\xdd\x9f\xe2\x09\x47\x47\x2a\x3b\x4d\x78\xb6\x35\x11\xfa\xfe\xd4\x7e\x88\x08\x37\x76\x1f\x4d\x45\x08\x3c\x98\xf1\xc2\xbb\xc6\x45\x09\xf5\x7d\x9d\xcb\x75\xad\x8f\x20\x27\xf1\x38\xdb\x46\x77\x93\x77\xea\x39\x0b\xeb\x40\x27\xd3\xe5\x29\x75\xb1\x3c\xb2\x05\x2c\xb0\x9f\xec\xa2\x3f\x9a\x3a\x8f\xdf\xde\x2b\xa0\x01\x27\x07\x1b\x63\xe4\x90\xd0\x8a\xbf\xd1\x60\xbc\xf9\x4f\x95\x9d\x52\x0e\x02\x3d\xa7\x9b\x0c\xe3\xad\x09\xfd\xcb\xea\xda\x2b\x2c\x52\xa6\x9c\x41\xf4\xe9\xab\x92\xf9\xba\xa0\x9d\x85\x05\x6b\xaa\xfb\x00\x9f\x6a\x61\xb3\xe5\xb3\x98\x79\x66\x12\x07\xbf\x98\x6a\xe8\x76\x08\x4b\xb0\xa3\x22\xb8\xb1\x34\x49\xdb\x06\x5c\x1e\x47\x9a\x47\xc1\xda\xf7\x41\xf6\x46\x47\x90\x5d\xdd\xd6\x1b\xab\x9a\x4a\x6e\x3d\xc0\x97\x80\x5f\x75\x39\x30\x63\x3d\xdb\xcf\x6b\xf8\x60\xee\x36\x76\x88\x67\xb0\xb1\x19\xe5\xe9\x76\x6c\xfc\x14\x0f\x20\x05\x0f\xdb\x11\x79\xc2\x68\xdc\xb0\xdb\xf1\xfb\xf2\xed\xc8\xf7\xae\xb8\x23\x76\x07\x1e\x58\x28\xc1\x03\x8b\xa9\xc8\xbc\x1e\xf0\xd8\xcc\xba\x70\xc1\xdd\x70\x20\xc0\xf9\x59\x06\x00\x0c\xf3\x60\x2c\x33\x3a\x72\x53\xee\xd1\xb5\xd9\x80\x3f\x86\x71\x3b\xb8\x82\x50\xb0\xd7\x25\xf3\xeb\x7e\x9b\x7d\xd5\x58\x48\x9f\x05\x5d\xff\x3d\x4e\x37\xae\x53\x14\xbc\xa0\x57\xb1\x05\xfa\xaa\x64\xbe\xc3\x7c\x3f\xdc\x5a\xf8\x8a\x3b\x60\x1e\x05\x8d\x7e\x82\x4d\xde\x75\xb2\xff\x6b\xee\xb1\xa8\x25\x18\xf5\xec\x16\xfc\x6b\x61\x0b\xca\x72\xcf\x58\xfb\x2f\xa5\xcc\x8a\xf5\xfc\x68\x92\xe1\x3f\xcb\xee\xba\xfb\x49\xeb\x26\xc2\xb6\x6b\x62\x58\x0b\x40\x2b\x32\xfb\xf2\x14\x76\xb5\xd7\xb9\x1a\xdf\x45\x48\xb2\x33\x1a\x64\x81\xe8\x58\x43\x7e\x79\x3b\x7e\x23\x90\xb4\xc3\xca\xb6\x22\x9a\xd1\x2c\xa3\xfe\xb9\xdb\x4f\x69\xad\x41\x5a\x94\x0b\x6b\x24\x17\xa7\x51\xa7\xaf\x88\xc8\x32\x89\xc3\x98\xfa\xc8\x82\xe4\xdb\x21\xe3\x6c\xe9\x60\xd1\x34\xcb\x63\xe8\x8c\x53\x87\x18\xb1\x33\x58\x32\x9f\x69\x2a\xf0\x8a\x7d\xd9\x5b\x28\x9d\xbb\x08\x5a\x0f\x83\xa8\x9a\x03\x2d\xa3\x36\x1e\x38\x63\x07\x0d\xa6\xcd\xe2\x23\x58\x66\xf9\x00\xd0\x62\x54\x6c\x4f\x52\x64\xad\x27\x78\x6e\x67\x0f\xfd\xdf\x59\x76\xea\x30\x66\x7c\xf2\xa7\x50\x60\xa7\xa6\x58\x9a\xa8\x92\x03\x78\x58\x3a\x74\x73\x69\x5c\xcb\xed\xe2\x74\x0d\x37\x53\x35\x33\x69\xf3\xdf\x0c\x37\x19\x69\xf0\x66\x7e\x28\x6a\xf3\x7f\xd9\x00\x0e\x27\xcc\x3b\xe8\xc4\xc3\xdc\xa0\x53\x73\x97\x0e\xd1\x6b\xe8\xdf\xd1\x91\x9a\x9c\x8c\xeb\xfb\x61\x6b\xd3\x2e\xd2\xc1\xe7\xce\x90\x13\x5a\xab\x7e\xf2\x0e\x3e\xb1\x94\x19\xb2\xe2\x4b\x8f\xc6\xb1\xbd\x4f\x3b\x13\x58\xf1\x52\x36\x65\xee\x8d\xb6\x4f\xcb\xa7\x1d\xd5\xdc\xe0\xf8\x64\x9e\x06\x1e\xa1\x9e\x47\x78\x1c\xc1\x35\x17\x08\xc5\x71\x0b\x74\x35\x8a\xff\x8c\xe6\xe6\xdc\x01\x8a\x1a\x55\x19\x3a\x38\x1b\x25\x25\xc3\x5e\x6d\x8b\x1c\xcd\xab\xcc\x22\x3f\xd9\xf9\x88\xd3\x16\x1f\x22\x73\xb1\x9f\x21\x4f\x21\x7f\x14\x48\x11\xb5\x4d\x67\x69\x32\xd1\xb3\x18\xd8\x15\x35\x25\x76\x67\x33\x24\xe9\x3a\xf1\xf8\xde\xfe\xa6\x7a\x04\xea\x1a\xfe\x35\x8d\x6b\x8d\xe9\x59\x9f\x27\x3c\x42\x0b\x83\x25\x2d\x7b\x8e\x16\xbc\xaf\xa2\x54\xc5\x28\xfb\x4b\x9b\xfa\xe0\xac\x90\xf5\x55\xf6\xb9\x03\xa9\xd9\x5a\x98\xac\x41\x14\xc3\xad\x48\xc0\xb6\xd4\x15\xb2\xa9\x09\xdb\xc2\xbc\x75\x70\x64\x7f\xa6\xfa\xf6\x21\x5a\x4f\xe1\x6f\x0c\x54\xf9\x3f\xf0\xbf\xba\x2c\x2a\xf7\xd4\x13\x9c\x13\xec\x39\xe5\x31\x4e\xc0\x3e\x59\x8b\x99\xab\xa6\xd6\x32\xd7\xce\x6e\x2d\x6e\xd4\xd8\xbc\x40\xd4\xfe\x68\x27\x38\x36\x6c\xa9\xa1\xac\x2c\x93\x50\x3a\xb4\xa7\xb5\xb7\x51\x4c\xd7\x2f\x4a\xf6\x9b\x91\xec\x2c\x6c\xbf\x43\xf3\x4f\x20\xf6\x0b\xc3\xd8\x49\x54\xff\x1a\xf7\x26\x30\xfd\xb9\x25\x7d\x53\xc2\xd8\xdf\x55\x13\x76\xb5\x02\x52\x6b\x84\x61\xc4\x22\x02\x91\x6d\xe7\x68\xe0\x85\xeb\xed\xd8\x80\x05\x88\x7f\xa7\x5f\x1c\x47\x7c\x5f\x98\xfd\x57\x93\xfb\xbd\x64\xdb\x8c\x59\xd3\x8e\xf1\x83\xaa\x25\x65\x9c\x3a\x3a\x2c\x94\x59\x34\xa9\x9a\x2b\x82\xef\xa4\xb9\x61\x98\xad\x48\x6a\x42\x52\x36\xb5\xff\x9e\xc6\x8d\x99\xb4\x01\xdf\x59\x39\xc0\xcc\xf8\xca\x7a\x8b\x75\x07\x23\x08\xb8\x1a\x5c\x34\x2d\x81\x7f\x71\x89\xc0\x2b\x5a\x4f\xbd\xb4\x6c\x3c\x71\xd5\x0a\x81\xe2\xf4\xe3\x0a\xe4\x01\xcb\x97\xa1\x0d\x78\x29\xc2\x98\xd5\x62\x1e\x56\x31\x1c\x39\x83\xd9\xda\x4c\x3b\x46\x8c\x14\x87\xa4\x05\x25\x20\x88\x09\x35\xd4\x99\x85\x70\x98\xbb\xaa\xb8\xdc\x71\x85\x38\xa3\x50\x3a\x4c\x35\x3a\x7d\x70\xb1\xe3\x64\x27\xe9\x9e\x1f\x64\x07\xda\xe5\x41\xab\xea\x77\x39\x5f\x66\x12\xf6\xd3\x26\x0f\x58\x50\x29\xe1\x5b\xae\xa0\xcc\xae\x09\x6f\x38\x89\x5e\x1b\xcf\x1b\x9a\x0c\xff\x65\xa4\x00\x9a\x83\xa6\x64\x53\x23\xe4\xb0\x56\x6b\xb7\x38\xf3\x20\x4f\xa5\x34\x74\x68\x7e\x65\xe7\xd7\xe0\x44\xc8\x5c\x2b\x3b\x7f\x6d\x49\x80\xba\xcb\x30\xe9\xe2\xc0\x56\x63\x8e\x33\xc0\xdc\x50\x87\xce\x8c\x7c\xae\x57\x50\x79\x20\x1f\x55\xf2\xc0\x56\x7f\x69\x26\xea\x66\x9a\xde\xd5\x28\x30\x77\x89\xec\x13\x17\x47\xe9\xe5\x9b\xfc\x5d\x10\xb5\xb8\xa0\x99\xb0\x9f\xc8\x33\x3c\x09\xdb\xeb\x8a\xe0\x15\xda\xe9\xe9\x16\x20\x46\x70\x7d\x0f\x37\xc6\x6b\x63\x89\xb7\xd3\xdb\x5c\xbd\x71\xbc\x12\x27\xdc\x87\x29\x2a\x03\x1f\xdf\x95\xc3\x91\xad\xb0\x90\xb1\x0a\x63\x58\xd5\xe4\x63\x65\xb5\x7a\xcb\x2a\xad\xdd\x44\x25\x40\xde\x89\x2d\x75\x6b\xfd\x33\x25\x50\x3a\x4e\xd6\x5b\xb2\x59\x8f\x37\x9b\xcc\xe3\x34\x66\x7e\x87\xc4\xa2\x83\x89\x50\xbb\x74\x8e\x53\x19\xdf\x40\x54\xf0\x29\x55\x54\xed\xf9\x49\x49\x6e\x54\xb0\x63\x07\x8d\xdd\x93\x3f\xe3\x45\xd4\xb4\xdb\x08\x84\x90\xd0\x3d\xcc\x76\x15\x69\x8f\x38\x56\xd7\xf7\x18\xb2\x17\x0b\x9c\xc2\x3a\xb1\x4e\xac\x44\xca\x59\x28\xd6\x97\x71\x16\xfc\x9d\x60\xda\x62\xbf\xc3\x0e\xd8\x17\x8c\x7a\xb6\x75\xf6\xc6\x74\xc2\x39\x72\x5a\x1b\x70\x74\x24\xcf\x0c\x95\x39\x95\xa9\x06\x68\x0b\x70\xb0\xc2\x26\x98\x04\xac\x40\xa5\x6b\xa5\xd4\x6b\x4f\x4d\x77\x88\x4d\xf2\x00\x52\xf1\x54\xc6\x7c\x29\xc2\x2d\x16\x55\x8d\x4a\x96\xc7\xc1\xbc\x12\x41\xcf\x5b\xc6\x5a\x28\x69\x33\xb0\x2f\xdb\xbf\xdd\x05\x83\x43\x5c\xea\x5a\x0d\x65\x6a\xb2\xae\x27\xf9\x35\x2f\x13\x2d\x58\x15\xeb\xd5\xe8\x08\x0b\x90\x96\x10\x97\x36\xbd\xce\x5c\xc1\xca\xfc\xb2\xbf\x75\x0b\x7d\x06\x48\xe7\x45\x05\x54\xbc\x25\x4f\xfd\x8d\x09\x08\xf9\xf6\x78\xd6\xd6\x29\x3e\xce\x9c\xf2\x39\x8d\xc8\x72\x71\x7e\x59\xcd\xe8\xba\xf6\x70\x25\x62\xc5\xe1\x64\x36\x97\x63\x99\x1e\x3b\xc8\xcc\xf6\x28\x25\x2a\x05\x2e\x98\xa2\xd6\xc7\x23\xe8\x32\x09\xe4\x67\x10\xc4\x41\x18\xdc\x33\xbf\x70\xba\xaf\xab\xe3\x8a\x0d\xf6\x31\xde\xf3\x8b\x52\x2c\xd8\x0b\x2a\x51\xc7\x8c\xec\xf1\x0f\xd4\x7f\xdb\x11\x9c\x7d\x9e\x14\xaa\xc5\x44\x46\xfa\x94\x55\x3d\xe9\x41\x13\x8e\xf7\x5c\x03\xcf\x00\xf2\x54\x3d\x30\x82\x24\x55\x12\xf2\x02\xbb\x5e\x99\xf7\x65\x07\x9c\xca\x05\x4b\xfa\xf9\x52\xb4\xf7\x3a\xf4\x37\x9a\x34\x98\x5e\x9c\xf1\x7d\xe0\x77\xcc\xe2\x22\x25\x7d\x20\x71\x83\x71\x61\xc9\x94\xe9\x6c\x91\x6c\x27\xef\xe4\xdf\xd3\xce\x38\x5d\x90\x1a\xc5\x4c\xb3\x72\x04\x64\x43\x4c\xc1\x53\x0a\x06\x8a\xfc\xd0\x8d\x60\xe0\x2b\x0a\x06\xfe\x70\x23\x18\xf8\x6a\x82\x81\xcb\x09\x85\x1b\xc1\xc0\x05\x04\x03\x97\xb3\x05\x37\x82\x81\x0b\x08\x06\x16\x8b\xbd\xcb\x8d\x62\xe0\x32\x14\x03\xc5\xd4\x7e\xa3\x18\x98\x6c\xc7\xa7\x3f\xb6\x98\x88\x0b\x82\x81\x69\x08\xf4\x37\x19\x85\x00\x15\x8c\x04\xe1\x16\x59\x42\x49\x00\x99\x5f\x09\x3c\xf5\x02\x57\xda\x6e\xe3\xcb\x5b\x0b\x19\xb3\x15\x14\x9a\x5a\x28\x90\x4e\x2a\x34\x86\xd5\x13\x8c\x41\x86\x9b\xcc\x2b\x59\xed\xb8\x0a\x3d\xd7\x76\xdd\x5a\x93\x9d\x2a\xb0\xe1\x66\x0a\xfa\x16\xdf\xf7\xc2\x26\x47\xeb\x09\x66\x96\x13\xfc\xe1\x4b\xc8\x09\xfe\x77\x26\x39\xc1\xca\x8f\xec\x0a\xb5\x04\xb3\x25\x9a\x4b\xd3\x10\x5c\x66\x2c\xac\xd4\x19\x59\x1e\xab\x21\x78\x46\xff\x93\x4d\x7a\x1f\xf3\x46\x3e\x70\x23\x1f\xf8\xff\x23\x1f\x78\x19\xf2\x68\x02\x25\x57\x90\xcc\x64\xd4\x03\x31\x7d\xcb\x4a\xf4\x02\x70\xed\xec\xf6\x10\x1e\x18\xba\xa6\x41\x83\xbc\x8b\x97\x28\x0a\xd2\x25\x99\x95\x18\xe3\xf4\x91\x06\xf9\xfb\x78\xb9\x81\x0e\x84\x61\xe9\x6c\xcf\x92\x13\x7f\x6c\x7b\x75\xd6\x64\x41\x3c\xd3\x69\x1a\x95\x6c\x5c\x66\x68\xe3\xa8\x07\xc8\x3c\x0f\x6a\x7e\xdb\x03\x03\x61\x7d\x58\xb8\x7e\x2f\xab\xcd\x27\xbb\xc9\x1e\xba\xe8\x4e\xc9\x88\x0c\xaf\xb9\x30\xe1\x45\x36\x4d\x87\xac\x44\x35\x16\x44\x2e\xe7\x33\x8d\x82\xc3\x55\x18\xd4\xd5\x49\x04\x88\x25\x20\x95\xea\x43\x09\xa6\xd5\x15\xa8\x83\x06\xf4\x98\xb7\x5b\x72\xee\xc0\xa4\x97\x1a\x5f\x0a\xde\xa4\xb5\xce\x6c\xb5\xe0\x31\x0d\x6a\xcc\x57\x19\x87\xfd\x18\x43\x91\xcc\x1c\x33\x61\x62\xc2\x84\x84\x39\x65\x82\xc7\x18\x45\x91\xa6\xd5\x73\x0a\xcb\x5d\xd9\xc7\xac\x8a\x1c\x74\x3e\x1d\x95\x65\x75\x27\x73\x7f\x48\xf6\xe4\xdf\xdc\x14\x50\x3c\x90\xc4\x99\x2d\x98\x17\x69\xec\xab\xf2\xa5\xd4\xde\xd4\xe2\x8a\x4b\x50\x26\x14\x23\xb4\x88\xfb\x2f\x7e\x97\x2f\xa0\xe2\xa8\x16\x58\x5c\xe0\x24\x89\x54\x60\x31\xf1\xf5\xd1\xa9\xc4\x15\xf9\xc3\x0b\xdc\x96\xc8\xcc\xc5\x2a\x64\x06\xe3\x90\x4a\xca\x4c\x5b\x9c\x5e\x3c\xbb\x40\x61\x16\x17\x21\x3a\x53\xea\xcc\x48\x4c\xf1\x61\x79\xee\x72\xcc\x39\x0e\xb4\x26\xf8\x06\xaf\x55\xc9\xc9\xf2\x6f\xd6\x8e\xe1\x13\x0d\x73\xb1\x54\x30\x49\x1c\xce\xdc\x42\xce\xca\x2b\xe6\xc4\x26\x2e\xde\x2d\x39\x11\x06\x69\xfb\x2b\x11\x57\x19\xe4\xf0\x5a\xb8\x12\xb2\x32\x69\xd2\xf8\xb3\x65\xae\x8b\x88\x65\xc2\x79\x34\x93\x45\x2c\x6b\x0d\x11\x06\xd5\xba\xe3\x32\x69\x03\x94\x88\xbc\xb2\x01\xdf\xdd\x8e\x54\x5b\xa5\x07\x13\xb3\xca\x1a\x9c\xf7\xb3\x15\x62\x9c\x55\xc7\x70\x25\x9a\x1c\x7c\xd1\x20\xe6\x4d\x56\xc2\x2c\xd7\x4b\xbd\xc2\x04\x50\xfa\x7a\x3f\xe0\x26\x2d\xeb\xb9\x64\x25\x4e\x99\x53\x39\xd7\xb3\x8e\x55\x01\xb4\x4a\x8f\x3a\xfa\x49\x7e\x54\x52\xf6\xfc\xe4\x67\x8c\xe7\x4d\x42\x24\x8f\xc3\x00\x3d\xa4\x12\x92\xcc\x16\x71\x0d\xba\x09\x09\x0b\xbd\x71\x3d\xc4\xa6\x0a\xc9\x36\xc2\x02\xfb\x16\x79\x9d\x36\xcb\x04\x11\xd5\x41\xa8\xb0\x0a\x66\x24\x4d\xaf\xd9\x96\x34\xf9\x55\xcf\x18\xf7\x1c\x58\x5f\x3e\x1c\x9b\xde\x44\xaa\xca\x66\x13\xd2\xe4\x24\x7f\xc1\xe3\x13\x1e\x5e\xff\xe3\x13\x7e\x9e\xe2\xf8\x84\x6f\x45\x18\xc5\x93\x78\xfe\xa5\x19\xa7\x46\x2e\x2d\xab\x83\x1c\x9c\xc9\x7c\x47\x30\xcc\x7a\x14\x3e\x18\x3b\x33\x2a\x63\xf9\x2b\xe6\x45\x69\x52\xc7\x57\x88\x94\x15\x7f\xc9\x4c\x46\xac\x06\x47\x29\x02\xca\x7c\xe9\x85\xca\x61\xf8\x5e\xfc\x0c\x07\x34\xbc\x71\xb1\x80\x3d\xf6\x26\xb5\x41\xe6\x9c\x06\x7b\xe4\x4d\x16\xe7\x97\xf5\x5b\xf9\x77\x64\xd2\x32\x57\xb0\x0d\xda\xed\xbd\x09\xab\x33\x47\x29\x32\x54\x27\x2a\xa8\x98\xcb\x6b\x22\x72\xf3\xd0\xd5\xd0\xf7\x38\xc3\x57\xc2\x9e\x33\x7f\xc2\x24\xf1\x0b\x9d\xa5\x71\x5c\x75\x96\xc6\x0f\xff\xf8\xe8\xb7\x05\x79\xcd\xe3\x5a\x63\xea\xe3\x15\x5e\x38\x67\x44\x21\xdc\xa0\x41\xfe\x70\xa8\x38\x4c\xc9\x82\x69\x4f\x8a\xca\xeb\x74\x20\x44\x0b\xa2\x94\x43\x55\x2b\xd2\x03\xb5\xf4\xee\x64\x28\x03\x3c\xe3\x89\xe4\x4e\x78\x9a\xfa\x7c\xa7\x4a\x89\xc2\xbf\xdd\x48\x14\xae\x93\x44\x61\x71\xcc\x64\xe4\x46\xa3\xf0\x05\x34\x0a\x97\x13\x0b\x37\x1a\x85\x0b\x68\x14\x2e\x67\x0b\x6e\x34\x0a\x17\xd1\x28\x14\x07\x52\x37\x1a\x85\xcb\xd0\x28\x94\x88\x3f\x6e\x44\x0a\x53\x88\x14\x62\x26\x02\xea\x7f\x36\x2d\xbf\xb8\xf4\x25\x78\xf9\xe1\xf9\xc9\x4c\xcc\xfc\x6a\x8b\xd1\xab\x7c\xcf\x5f\x9f\xe3\xee\xfb\xb3\xbc\x90\x79\xe1\xb7\xfb\xb5\x9c\xfa\x12\xcb\x83\x12\xfe\x7e\x86\x40\x65\xb6\x13\x2d\x7e\x5f\x7d\xa2\xc5\x31\x9e\x3e\xad\x32\xbc\x55\xad\xe4\x5a\x33\xdb\xe3\xbb\x87\x5b\x7c\x9c\x20\x58\xb9\xf5\x7f\x01\x00\x00\xff\xff\xb0\xbf\xfd\x3a\xdf\x5f\x00\x00")

func dataCardsYamlBytes() ([]byte, error) {
	return bindataRead(
		_dataCardsYaml,
		"data/cards.yaml",
	)
}

func dataCardsYaml() (*asset, error) {
	bytes, err := dataCardsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/cards.yaml", size: 24543, mode: os.FileMode(0644), modTime: time.Unix(1606509697, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0x7, 0x67, 0x33, 0x62, 0x51, 0x21, 0x4b, 0xfb, 0x56, 0xe2, 0x19, 0xa9, 0xe, 0x30, 0xd9, 0x1b, 0x74, 0x92, 0x85, 0x20, 0x93, 0x98, 0xb9, 0xbc, 0x7e, 0x71, 0xe4, 0x39, 0x6b, 0x36, 0x85}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/cards.yaml": dataCardsYaml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": {nil, map[string]*bintree{
		"cards.yaml": {dataCardsYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
