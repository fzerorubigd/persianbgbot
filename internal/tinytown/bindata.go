// Code generated for package tinytown by go-bindata DO NOT EDIT. (@generated)
// sources:
// data/cards.yaml
package tinytown

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataCardsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\x41\x73\xdb\xb8\x15\xbe\xfb\x57\xbc\xa3\x3d\x8d\x35\x4d\x32\x9d\xce\xe4\xb6\xf1\xa4\x3b\x7b\x48\x9b\x69\x76\xbb\xd3\x23\x22\x42\x22\x1b\x12\xf0\x02\xa0\x33\xba\xc5\x3b\x96\xac\x83\x6e\x3d\xf5\x9a\x0b\x65\x4d\x1a\x56\xb2\x93\x8e\x7b\xe8\xef\x78\x90\x6e\xf9\x25\x9d\x07\x90\x14\x41\x49\xee\xee\xc9\x16\x05\x81\x78\xdf\xfb\xbe\xef\x7d\x38\x3d\x3d\x3d\x7a\x29\x45\x9e\x71\x61\xf4\xb3\xa3\xd3\x23\x80\x3f\xb2\x8c\x3f\x83\x6f\x54\x3f\x4e\x0c\xef\x9b\xaf\xef\xff\xa1\xe1\xdb\x3c\x49\xa3\x23\x80\x17\x62\x98\x26\x3a\x7e\x06\x8f\xe1\xf8\x2f\xaf\x4e\xa0\x07\x3f\xc6\x5c\x40\x5f\x0a\x6d\x54\xde\x37\x3c\x7a\x04\x8a\x9f\xa7\xac\xcf\x21\x3f\x07\x23\xe1\x09\xbc\xa1\xdf\x26\x62\xa8\x21\x11\x30\x92\xb9\x02\x23\xdf\x09\x78\x97\x98\x18\x98\x18\x81\x34\x31\x57\xcd\x2a\x30\xa3\x73\xae\x7b\x47\x00\xaf\xb8\xd2\x09\x13\xcf\x60\x33\x5b\xdf\x00\x16\x76\x8c\x8b\xcd\x0c\x0b\x5c\xf5\xc0\x4e\xed\xcf\xf4\x09\xf0\x16\x0b\xfc\x84\x0b\x7b\x0d\x78\x87\x25\xd8\xf1\x66\x86\x0b\x3b\xc5\xc2\x4e\x36\x33\x2c\x01\x17\x58\x00\x96\x76\xba\x5d\x3a\xa6\x2f\x01\x4b\x5c\x02\xde\xd9\x6b\x5c\xd2\x1a\x7a\xb2\xa4\xa5\x73\x2c\x80\x1e\xee\xae\xdf\xcc\xd6\x25\x2e\x37\x33\x58\xdf\xd0\xeb\x4a\x3b\xc5\x5b\x5c\xd0\x46\x05\x3d\xa6\x97\xdd\xdb\x29\x7e\xa1\xef\xdd\xcb\x7b\x5d\x3c\x2f\x38\xc8\x01\x98\x98\xc3\x6b\xde\x97\x22\x82\x6f\x86\x7c\x0f\xaa\x03\xa9\x80\xb3\x7e\x0c\xb9\x48\x7e\xca\x79\x88\x0d\x1c\x7b\xc0\x4c\xcc\x04\x1c\x37\xbd\x3b\x39\x09\xe0\x7d\x18\x40\xc0\x39\x55\x50\xe0\x0a\x8b\xcd\xcc\x97\x6b\x27\x76\x8a\xf7\xdd\xaa\xe9\xa7\x15\x84\x0d\x5c\xf4\x67\x8c\x05\xce\xaa\x6d\x3e\xe2\x0a\xec\x35\x21\xef\x7e\x80\x05\x96\x38\xb7\xd3\xb0\xfe\xe7\x4c\x29\x6e\x0c\x9c\x31\x6d\xd2\xa0\xe8\xdf\xf9\xa2\x93\x01\x0c\x78\xd4\x83\x33\x99\x0b\xa3\x81\x69\x78\x02\x67\xd2\x18\xe6\x20\x6a\x6a\xc1\x62\xed\x4e\xf2\x1f\xfc\x97\x3f\x55\x81\x77\xbe\xfd\x73\xf7\x6f\x09\x9b\xcf\x61\xad\x74\xb0\x75\xb9\x99\xe1\x12\x4b\x77\x66\xea\x33\x51\xc7\x6d\xd1\x54\x51\xd8\x89\xdb\x6d\x55\xf5\x96\xba\x78\xe5\xbf\xa2\x72\x97\x58\xda\x6b\x4f\xaf\x3b\xaa\xad\x55\xda\x19\x33\x31\x8f\x14\x4b\xa9\xb9\x67\xcc\x70\x95\x08\xd6\xae\xf0\x09\x15\xd8\x83\x17\xd9\xb9\x19\x81\xfe\x29\x67\x8a\x87\x5a\xa0\x07\xef\xa4\x32\x31\xfc\xd6\x61\x71\x9c\x08\x6d\x38\x8b\x68\xc3\xd3\xc7\xf4\xe8\x24\xc0\xc0\xd1\xb9\x55\x23\xce\x5c\x03\xd6\x13\xe2\x1d\x71\xf5\x13\x95\x43\xe7\xbd\xf6\xa5\xd2\xe7\x2b\xfa\x67\x97\xf4\x9f\xed\x25\x3d\x0b\xd8\xf1\xc9\x09\xe8\x9a\x10\x69\x20\x86\xe3\xba\xdb\xb4\xe3\x2e\xa5\xec\xd8\x4e\xec\xe5\x66\x76\xd2\x42\xe6\x0f\x52\x19\xf8\x4e\x49\xf1\x8e\xf3\xc0\x3e\x7e\xef\x11\xf9\x41\xa4\x5c\x6b\x02\xc2\x41\x40\xc2\x48\x99\x36\x70\x9e\xb2\x11\x57\x84\x11\x3d\x1a\xb2\x8c\x3f\x72\x8b\xfa\x4c\x80\x90\x90\x4a\x31\x24\x05\xb0\xb7\x1c\x4c\xae\x84\x63\xcb\x4b\xa6\x0d\x57\xf0\x9c\xb4\xc2\x55\x1b\x2e\x7b\x6d\x2f\x49\xa7\x81\x83\xd4\x72\xae\xc8\x4c\xf4\xdf\xb1\x0e\x57\xef\xbd\x13\x86\x83\xaa\x20\xbd\x13\xbd\xbd\x4a\x56\x84\x0f\x81\xec\x95\x43\x00\x60\x81\x73\x12\x51\x81\xf7\xf6\x8a\x5e\xd8\x78\x01\xd8\xb1\x7f\x5d\x41\x1d\xf2\x0e\xf2\x01\x3f\x91\x71\xd8\x09\x6d\xe1\xba\x50\xe2\xd2\xf1\x78\xb5\x99\x55\x84\xee\xfa\xc8\xb7\x8a\x89\x08\x5e\xb2\x5c\xcb\x94\xe7\x59\xed\x27\x7f\x96\x51\x87\x74\x7f\x25\x76\xe5\x62\xc0\x23\x38\xae\x74\x74\xd2\x22\xda\x53\x47\x34\x72\x99\x36\x54\x35\xe7\xbf\xbe\x9f\x55\xd4\xa1\x43\xe3\x6d\x4d\xa6\x25\xac\x6f\x88\x10\x76\x0c\x78\xeb\x55\xb3\x4f\x68\x04\x4c\x78\x68\x79\xc1\xe1\x07\x91\x5c\xd0\x8b\xcc\xa8\x7d\xce\xa7\x9e\x0a\xdf\x65\x19\x8f\x12\x66\x78\x3a\x02\x3f\x3f\xd8\xd6\xf7\xa4\x00\x26\x80\x1f\xd2\x4f\x60\x76\x3b\xe7\xf2\x0a\xa7\x6e\x5c\x62\x81\x9f\xed\x95\xbd\xae\xe8\x1b\x5a\xdd\xb1\x2b\xd2\x7d\xd3\x36\xb1\x86\x29\x27\x5e\x3d\x6e\x81\x33\x04\xd7\xe9\x07\x94\x35\x5f\x97\xce\x61\x96\xdd\x1e\xbe\x64\x22\x52\x4c\xc3\x2b\x46\x85\xee\x38\xc5\x8e\xff\xb3\xe8\x6f\xac\xcf\x85\x09\x07\x41\xef\x41\x4b\xd8\x67\xf1\x9d\x82\xed\x98\xc4\x6c\xa7\x64\xfe\x63\x5c\x10\x3c\x76\x8a\x0b\xf8\xfa\xfe\xef\x55\x95\x7b\x47\x82\xbd\xb4\x3f\xe3\xbf\xfd\x64\x20\x8a\x2e\xf7\x1b\xe4\x69\xab\xe0\x3f\xbd\xe1\x69\xa2\xdf\xd6\x64\x3d\x53\x5c\x53\x3d\x1d\xba\x42\xc6\x9a\xde\xa7\x29\x0c\x72\x93\x2b\xde\x8a\x0f\x8e\x05\xa3\x5f\x48\x03\xf2\x43\x02\x20\x38\xbb\xe7\x74\x33\xc1\x3d\x4c\x78\x4f\x4d\x76\xff\x57\x8b\x2b\x91\x12\xd7\x0b\x6a\xa7\xaf\xea\xd6\xeb\x92\x16\x53\x50\xd8\xb5\x8b\xa5\x9d\x36\xc3\xf4\x21\x7e\x78\x7f\x2d\x3b\x04\x69\xc3\x75\xce\x52\x3e\xe2\x2e\x79\xfd\xc8\x8c\x93\x68\x03\xd4\xae\x50\x9e\x76\x73\x82\x83\xca\xc4\x89\x86\x3e\x53\x91\xcf\x68\xfc\x82\x2b\x60\xb5\xb3\x4a\xef\xac\x29\x1f\x18\x90\x0a\x54\x32\x8c\x0d\x75\xc7\x99\x6c\x1d\xe6\x34\x3c\xf6\x1d\x93\xba\xb5\xf7\xa3\xca\x77\xe3\x56\x2e\x19\x28\x99\x41\xcc\x15\x07\x32\x27\x7f\xaa\xc4\xd0\x5b\x0e\x36\x2b\x20\x6f\x57\x9e\xfb\x9b\x72\xbb\xd3\xcf\x90\xb7\x55\x03\xbc\x6d\xd5\xad\x0b\x41\xc6\x5a\x09\xab\x6a\x03\x4f\x84\xca\x72\xc9\xab\xe9\x35\x63\x5c\xc0\x7a\x62\xff\xeb\x7c\xc0\x75\xdb\x07\x3d\x3f\x29\x68\x9d\x7b\x0d\x1d\xee\x83\xfb\x45\x97\x63\x55\x94\x74\xd6\x49\x7b\xdd\xd4\xd9\x63\x77\x79\xb5\xd4\x6d\xb6\x3d\x7f\x9b\x7c\x2e\xb0\x6c\x33\x26\xe9\xdc\x2f\x3c\xe4\x44\xbf\x8c\x64\xaf\x63\x95\x88\x26\x8f\xbe\xa0\xa1\x09\xdf\x2b\x1e\xd8\x91\x73\xa3\x37\x4c\xf3\xa8\x66\x8c\xc8\xb3\x37\xc4\x9f\xc1\xc1\x58\xdf\xb9\x0f\x84\x2e\x75\xd8\xa0\x1e\x14\xea\x4e\xf6\x24\x79\x4f\x08\x21\x37\x88\x82\x2b\x80\x1b\xd4\x1d\xf9\x4e\xf1\x63\x65\xe5\xee\x49\xd9\x3b\xc6\x8f\xe4\x98\xf6\xaa\xc6\x72\x8b\x76\x75\x09\x98\xd3\x16\x15\x65\xe8\x03\x45\x20\x37\xbe\x71\x05\x9b\x2f\xad\xf5\xed\x92\x82\x2f\x6a\x93\xa8\xb3\x67\x3b\x18\xbd\x4e\xd2\x0b\x46\xf1\x28\xcf\x76\xf3\x7f\x0f\x7e\xd3\xbd\x08\x34\x4a\xab\xb1\x4e\x99\x1a\x72\x6d\x08\x69\x93\x0c\x73\x99\x6b\x18\x2a\x99\x9f\x87\x9d\xa9\x9a\xab\x59\xc6\xfd\xdd\xe1\x90\x02\xf7\x5e\xb1\xf6\xdd\x1b\x0a\xfc\x42\x4a\x75\xa2\xf9\x7f\xf3\xc5\xb7\x6d\x8e\x2b\x5c\xae\x4b\x42\xcf\x47\x9d\x31\xfe\xd3\xdd\x9d\xca\x03\xf6\xec\x22\x13\x81\x48\x16\x5e\x01\xbe\x9d\x46\x6d\x10\x0d\x33\x79\xc3\xe0\xe7\x52\x44\x19\x7b\xeb\xa2\x5f\x03\xa8\xbb\x9d\x32\xe1\x6f\x4c\x95\xf7\x09\x96\x71\x0d\x0c\x14\xd7\x32\x57\x7d\xae\x7d\xb6\xa4\xe1\xd3\x8f\x25\x79\x9d\x91\x81\x87\xb1\xda\xbf\xfc\x95\x75\x1b\xa7\x7a\xf0\x82\x9a\xe3\x7d\x53\xb5\x62\x16\xe5\xd4\x58\xa6\x11\x3c\x6e\xde\x12\x0e\xa7\xfa\xfa\xea\x11\x0e\xec\xa7\xce\xa5\x95\xba\xed\xa4\x9b\x28\x1d\xa7\x6e\x7c\x36\xaf\xc4\xb0\x33\x8a\x3e\xd8\x89\x27\x72\xcb\x29\xb6\xf7\x99\x30\x98\xd4\xb9\xae\xfa\xb6\xbd\x19\xdd\xa6\xc2\x63\x38\x52\x4f\xd6\xa5\x57\x65\x51\xf9\x9a\xcb\x1e\x55\x77\xab\x95\xce\x06\xc3\x50\xed\x8f\xdc\x5c\xbf\xb6\xbe\x1e\xb2\xe6\x23\x41\xe0\xdd\xff\xd6\xbb\xbb\xa7\xca\x9d\x9d\xd2\x0e\x2d\x02\x7c\x4f\x17\xe9\xb7\x23\x78\xce\x4c\xac\x83\x18\x75\x48\x3e\x4e\x04\x5b\xb3\x4a\x34\x64\x89\xd6\x89\x18\xfe\xea\x2c\xb5\x37\x1b\x35\x86\x15\x7a\xd5\xa4\xf1\x9d\xee\xe1\x0d\x53\xa9\x94\xd9\x61\xcf\x75\x76\xea\xa7\x72\x76\x9e\x72\xc3\x0f\xa5\xde\xf0\xb8\xb8\xb4\x63\x9c\x93\x8c\x9a\x81\xe2\x0e\xb6\xa6\x88\x5b\x0f\x3f\x3f\x2b\xe8\x84\x9d\x91\xe1\x98\xb3\x58\xdf\xb8\x2b\xfd\x55\x43\x38\xd7\x95\x5f\xe1\x9c\x27\x47\xff\x0b\x00\x00\xff\xff\x31\x04\xf6\x5d\x5e\x12\x00\x00")

func dataCardsYamlBytes() ([]byte, error) {
	return bindataRead(
		_dataCardsYaml,
		"data/cards.yaml",
	)
}

func dataCardsYaml() (*asset, error) {
	bytes, err := dataCardsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/cards.yaml", size: 4702, mode: os.FileMode(420), modTime: time.Unix(1606577597, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/cards.yaml": dataCardsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"cards.yaml": &bintree{dataCardsYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
